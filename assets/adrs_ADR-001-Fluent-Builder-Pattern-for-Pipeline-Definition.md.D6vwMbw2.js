import{_ as s,c as e,o as n,ae as t}from"./chunks/framework.CCkVsPTE.js";const u=JSON.parse('{"title":"ADR-001: Fluent Builder Pattern for Pipeline Definition","description":"","frontmatter":{},"headers":[],"relativePath":"adrs/ADR-001-Fluent-Builder-Pattern-for-Pipeline-Definition.md","filePath":"adrs/ADR-001-Fluent-Builder-Pattern-for-Pipeline-Definition.md"}'),a={name:"adrs/ADR-001-Fluent-Builder-Pattern-for-Pipeline-Definition.md"};function l(p,i,r,o,d,h){return n(),e("div",null,i[0]||(i[0]=[t(`<h1 id="adr-001-fluent-builder-pattern-for-pipeline-definition" tabindex="-1">ADR-001: Fluent Builder Pattern for Pipeline Definition <a class="header-anchor" href="#adr-001-fluent-builder-pattern-for-pipeline-definition" aria-label="Permalink to “ADR-001: Fluent Builder Pattern for Pipeline Definition”">​</a></h1><p><strong>Decision:</strong> Use a fluent builder pattern to define data pipelines.</p><p><strong>Status:</strong> Accepted</p><p><strong>Context:</strong> We want to enable composable, readable, and testable pipeline definitions for staging, raw vault, business vault, and information marts. Pipeline definitions should support IntelliSense, strong typing, and fluent chaining.</p><p><strong>Decision:</strong> A fluent interface is used for pipeline setup:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pipelineBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithHub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerHub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithSatellite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerDetailsSatellite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><strong>Consequences:</strong></p><p>Improves developer experience</p><p>Encourages consistent, expressive APIs</p><p>Harder to serialize/deserialize than declarative models</p><p><strong>Advice:</strong> Use fluent chaining for programmatic definitions and provide YAML parsing as a secondary input mechanism for ops or analysts.</p>`,11)]))}const E=s(a,[["render",l]]);export{u as __pageData,E as default};
